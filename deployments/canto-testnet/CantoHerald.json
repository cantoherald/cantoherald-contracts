{
  "address": "0xe75eCe5A20b89c4D14735dc0447AEd91F703e322",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        }
      ],
      "name": "Subscribed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getSubscribers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubscribersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "subscribedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "subscribers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb566cfd061cd7975fad61fa5b24edb30ee6eb3f6dba91be5eb005b47c5145a16",
  "receipt": {
    "to": null,
    "from": "0xE91D2cC696eB3640F73c66F57d0004A5CAC00Bfc",
    "contractAddress": "0xe75eCe5A20b89c4D14735dc0447AEd91F703e322",
    "transactionIndex": 0,
    "gasUsed": "710618",
    "logsBloom": "0x
    "blockHash": "0xf333c13cd11aa69913c99d05a6ccb0e06f9c8f4c6e371ca825c5bf25545ec270",
    "transactionHash": "0xb566cfd061cd7975fad61fa5b24edb30ee6eb3f6dba91be5eb005b47c5145a16",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 661521,
        "transactionHash": "0xb566cfd061cd7975fad61fa5b24edb30ee6eb3f6dba91be5eb005b47c5145a16",
        "address": "0xe75eCe5A20b89c4D14735dc0447AEd91F703e322",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xf333c13cd11aa69913c99d05a6ccb0e06f9c8f4c6e371ca825c5bf25545ec270"
      }
    ],
    "blockNumber": 661521,
    "cumulativeGasUsed": "710618",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "fc3d254f9c34e19747286eb0ca750906",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getSubscribers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscribersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscribedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"subscribers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getSubscribers(uint256)\":{\"details\":\"utility function that can return subscribers in chunks of 100sthis is to avoid out of gas errors when calling from the frontend\"}},\"stateVariables\":{\"subscribers\":{\"details\":\"we also put the subscribers in an array to be able to pick random onessure could be done more gas efficient but should be fine for Canto\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CantoHerald.sol\":\"CantoHerald\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"contracts/CantoHerald.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\ncontract CantoHerald is Initializable {\\n    // mapping from address to array index of a subscriber\\n    mapping(address => uint256) public subscribedAt;\\n\\n    /// @dev we also put the subscribers in an array to be able to pick random ones\\n    /// @dev sure could be done more gas efficient but should be fine for Canto\\n    address[] public subscribers;\\n\\n    event Subscribed(address indexed subscriber);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function subscribe() external {\\n        require(subscribedAt[msg.sender] == 0, 'Already subscribed');\\n        subscribedAt[msg.sender] = block.timestamp;\\n        subscribers.push(msg.sender);\\n        emit Subscribed(msg.sender);\\n    }\\n\\n    function getSubscribersCount() external view returns (uint256) {\\n        return subscribers.length;\\n    }\\n\\n    /// @dev utility function that can return subscribers in chunks of 100s\\n    /// @dev this is to avoid out of gas errors when calling from the frontend\\n    function getSubscribers(\\n        uint256 offset\\n    ) external view returns (address[] memory, uint256[] memory) {\\n        require(subscribers.length > 0, 'No subscribers available');\\n        require(offset < subscribers.length, 'Offset out of bounds');\\n\\n        address[] memory addresses = new address[](100);\\n        uint256[] memory timestamps = new uint256[](100);\\n        uint256 start = subscribers.length < 100 ? 0 : subscribers.length - 100;\\n\\n        if (offset != 0) {\\n            start = offset;\\n        }\\n\\n        for (uint256 i = 0; i < 100 && start + i < subscribers.length; i++) {\\n            addresses[i] = subscribers[start + i];\\n            timestamps[i] = subscribedAt[addresses[i]];\\n        }\\n\\n        return (addresses, timestamps);\\n    }\\n}\\n\",\"keccak256\":\"0x708d68e1985318937eb6ba436fa59573ab5826a2a52f769b7a1e65dda0160fe9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001f61002460201b60201c565b6101bf565b600060019054906101000a900460ff1615610074576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161006b90610168565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1610156100e35760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff6040516100da91906101a4565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006101526027836100e5565b915061015d826100f6565b604082019050919050565b6000602082019050818103600083015261018181610145565b9050919050565b600060ff82169050919050565b61019e81610188565b82525050565b60006020820190506101b96000830184610195565b92915050565b610b67806101ce6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633b6058151461005c57806359221a681461008d5780638f449a05146100bd578063a380c7bc146100c7578063e4a86349146100f7575b600080fd5b610076600480360381019061007191906105e0565b610115565b6040516100849291906107bb565b60405180910390f35b6100a760048036038101906100a291906105e0565b6103d3565b6040516100b49190610801565b60405180910390f35b6100c5610412565b005b6100e160048036038101906100dc9190610848565b610580565b6040516100ee9190610884565b60405180910390f35b6100ff610598565b60405161010c9190610884565b60405180910390f35b606080600060028054905011610160576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610157906108fc565b60405180910390fd5b60028054905083106101a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019e90610968565b60405180910390fd5b6000606467ffffffffffffffff8111156101c4576101c3610988565b5b6040519080825280602002602001820160405280156101f25781602001602082028036833780820191505090505b5090506000606467ffffffffffffffff81111561021257610211610988565b5b6040519080825280602002602001820160405280156102405781602001602082028036833780820191505090505b509050600060646002805490501061026957606460028054905061026491906109e6565b61026c565b60005b90506000861461027a578590505b60005b60648110801561029c5750600280549050818361029a9190610a1a565b105b156103c457600281836102af9190610a1a565b815481106102c0576102bf610a4e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168482815181106102fe576102fd610a4e565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001600085838151811061034f5761034e610a4e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548382815181106103a5576103a4610a4e565b5b60200260200101818152505080806103bc90610a7d565b91505061027d565b50828294509450505050915091565b600281815481106103e357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048b90610b11565b60405180910390fd5b42600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fa88fac53823b534c72d6958345adbe6801e072750d83b490d52ebbac51473a6360405160405180910390a2565b60016020528060005260406000206000915090505481565b6000600280549050905090565b600080fd5b6000819050919050565b6105bd816105aa565b81146105c857600080fd5b50565b6000813590506105da816105b4565b92915050565b6000602082840312156105f6576105f56105a5565b5b6000610604848285016105cb565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061066482610639565b9050919050565b61067481610659565b82525050565b6000610686838361066b565b60208301905092915050565b6000602082019050919050565b60006106aa8261060d565b6106b48185610618565b93506106bf83610629565b8060005b838110156106f05781516106d7888261067a565b97506106e283610692565b9250506001810190506106c3565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610732816105aa565b82525050565b60006107448383610729565b60208301905092915050565b6000602082019050919050565b6000610768826106fd565b6107728185610708565b935061077d83610719565b8060005b838110156107ae5781516107958882610738565b97506107a083610750565b925050600181019050610781565b5085935050505092915050565b600060408201905081810360008301526107d5818561069f565b905081810360208301526107e9818461075d565b90509392505050565b6107fb81610659565b82525050565b600060208201905061081660008301846107f2565b92915050565b61082581610659565b811461083057600080fd5b50565b6000813590506108428161081c565b92915050565b60006020828403121561085e5761085d6105a5565b5b600061086c84828501610833565b91505092915050565b61087e816105aa565b82525050565b60006020820190506108996000830184610875565b92915050565b600082825260208201905092915050565b7f4e6f20737562736372696265727320617661696c61626c650000000000000000600082015250565b60006108e660188361089f565b91506108f1826108b0565b602082019050919050565b60006020820190508181036000830152610915816108d9565b9050919050565b7f4f6666736574206f7574206f6620626f756e6473000000000000000000000000600082015250565b600061095260148361089f565b915061095d8261091c565b602082019050919050565b6000602082019050818103600083015261098181610945565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109f1826105aa565b91506109fc836105aa565b9250828203905081811115610a1457610a136109b7565b5b92915050565b6000610a25826105aa565b9150610a30836105aa565b9250828201905080821115610a4857610a476109b7565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a88826105aa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610aba57610ab96109b7565b5b600182019050919050565b7f416c726561647920737562736372696265640000000000000000000000000000600082015250565b6000610afb60128361089f565b9150610b0682610ac5565b602082019050919050565b60006020820190508181036000830152610b2a81610aee565b905091905056fea264697066735822122092954783da7ff196b664a3b01de2130aec2f09a3e7036b0a63dcb713127b1b3964736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80633b6058151461005c57806359221a681461008d5780638f449a05146100bd578063a380c7bc146100c7578063e4a86349146100f7575b600080fd5b610076600480360381019061007191906105e0565b610115565b6040516100849291906107bb565b60405180910390f35b6100a760048036038101906100a291906105e0565b6103d3565b6040516100b49190610801565b60405180910390f35b6100c5610412565b005b6100e160048036038101906100dc9190610848565b610580565b6040516100ee9190610884565b60405180910390f35b6100ff610598565b60405161010c9190610884565b60405180910390f35b606080600060028054905011610160576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610157906108fc565b60405180910390fd5b60028054905083106101a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019e90610968565b60405180910390fd5b6000606467ffffffffffffffff8111156101c4576101c3610988565b5b6040519080825280602002602001820160405280156101f25781602001602082028036833780820191505090505b5090506000606467ffffffffffffffff81111561021257610211610988565b5b6040519080825280602002602001820160405280156102405781602001602082028036833780820191505090505b509050600060646002805490501061026957606460028054905061026491906109e6565b61026c565b60005b90506000861461027a578590505b60005b60648110801561029c5750600280549050818361029a9190610a1a565b105b156103c457600281836102af9190610a1a565b815481106102c0576102bf610a4e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168482815181106102fe576102fd610a4e565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001600085838151811061034f5761034e610a4e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548382815181106103a5576103a4610a4e565b5b60200260200101818152505080806103bc90610a7d565b91505061027d565b50828294509450505050915091565b600281815481106103e357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048b90610b11565b60405180910390fd5b42600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fa88fac53823b534c72d6958345adbe6801e072750d83b490d52ebbac51473a6360405160405180910390a2565b60016020528060005260406000206000915090505481565b6000600280549050905090565b600080fd5b6000819050919050565b6105bd816105aa565b81146105c857600080fd5b50565b6000813590506105da816105b4565b92915050565b6000602082840312156105f6576105f56105a5565b5b6000610604848285016105cb565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061066482610639565b9050919050565b61067481610659565b82525050565b6000610686838361066b565b60208301905092915050565b6000602082019050919050565b60006106aa8261060d565b6106b48185610618565b93506106bf83610629565b8060005b838110156106f05781516106d7888261067a565b97506106e283610692565b9250506001810190506106c3565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610732816105aa565b82525050565b60006107448383610729565b60208301905092915050565b6000602082019050919050565b6000610768826106fd565b6107728185610708565b935061077d83610719565b8060005b838110156107ae5781516107958882610738565b97506107a083610750565b925050600181019050610781565b5085935050505092915050565b600060408201905081810360008301526107d5818561069f565b905081810360208301526107e9818461075d565b90509392505050565b6107fb81610659565b82525050565b600060208201905061081660008301846107f2565b92915050565b61082581610659565b811461083057600080fd5b50565b6000813590506108428161081c565b92915050565b60006020828403121561085e5761085d6105a5565b5b600061086c84828501610833565b91505092915050565b61087e816105aa565b82525050565b60006020820190506108996000830184610875565b92915050565b600082825260208201905092915050565b7f4e6f20737562736372696265727320617661696c61626c650000000000000000600082015250565b60006108e660188361089f565b91506108f1826108b0565b602082019050919050565b60006020820190508181036000830152610915816108d9565b9050919050565b7f4f6666736574206f7574206f6620626f756e6473000000000000000000000000600082015250565b600061095260148361089f565b915061095d8261091c565b602082019050919050565b6000602082019050818103600083015261098181610945565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109f1826105aa565b91506109fc836105aa565b9250828203905081811115610a1457610a136109b7565b5b92915050565b6000610a25826105aa565b9150610a30836105aa565b9250828201905080821115610a4857610a476109b7565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a88826105aa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610aba57610ab96109b7565b5b600182019050919050565b7f416c726561647920737562736372696265640000000000000000000000000000600082015250565b6000610afb60128361089f565b9150610b0682610ac5565b602082019050919050565b60006020820190508181036000830152610b2a81610aee565b905091905056fea264697066735822122092954783da7ff196b664a3b01de2130aec2f09a3e7036b0a63dcb713127b1b3964736f6c63430008120033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getSubscribers(uint256)": {
        "details": "utility function that can return subscribers in chunks of 100sthis is to avoid out of gas errors when calling from the frontend"
      }
    },
    "stateVariables": {
      "subscribers": {
        "details": "we also put the subscribers in an array to be able to pick random onessure could be done more gas efficient but should be fine for Canto"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/CantoHerald.sol:CantoHerald",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/CantoHerald.sol:CantoHerald",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 461,
        "contract": "contracts/CantoHerald.sol:CantoHerald",
        "label": "subscribedAt",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 465,
        "contract": "contracts/CantoHerald.sol:CantoHerald",
        "label": "subscribers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
{
  "address": "0xcE10fAAffdf51217Ed301210122F83E07FB23899",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockCoinbase",
      "outputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gaslimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a43c635831505f376a5a1b2f04eaf44f221c0b41ae1d1baaf9c38d099369464",
  "receipt": {
    "to": null,
    "from": "0xE91D2cC696eB3640F73c66F57d0004A5CAC00Bfc",
    "contractAddress": "0xcE10fAAffdf51217Ed301210122F83E07FB23899",
    "transactionIndex": 0,
    "gasUsed": "632396",
    "logsBloom": "0x
    "blockHash": "0x26df91e9342e5d784b1da85dec661c032981521ea4aab956ad7b8a4d79320227",
    "transactionHash": "0x5a43c635831505f376a5a1b2f04eaf44f221c0b41ae1d1baaf9c38d099369464",
    "logs": [],
    "blockNumber": 654081,
    "cumulativeGasUsed": "632396",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "abb6c046a443753560edc2db36717bcf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Multicall - Aggregate results from multiple read-only function calls\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Multicall.sol\":\"Multicall\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @title Multicall - Aggregate results from multiple read-only function calls\\n/// @author Michael Elliot <mike@makerdao.com>\\n/// @author Joshua Levine <joshua@makerdao.com>\\n/// @author Nick Johnson <arachnid@notdot.net>\\n\\ncontract Multicall {\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n\\n    function aggregate(\\n        Call[] memory calls\\n    ) public returns (uint256 blockNumber, bytes[] memory returnData) {\\n        blockNumber = block.number;\\n        returnData = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory ret) = calls[i].target.call(\\n                calls[i].callData\\n            );\\n            require(success);\\n            returnData[i] = ret;\\n        }\\n    }\\n\\n    // Helper functions\\n    function getEthBalance(address addr) public view returns (uint256 balance) {\\n        balance = addr.balance;\\n    }\\n\\n    function getBlockHash(\\n        uint256 blockNumber\\n    ) public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(blockNumber);\\n    }\\n\\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(block.number - 1);\\n    }\\n\\n    function getCurrentBlockTimestamp()\\n        public\\n        view\\n        returns (uint256 timestamp)\\n    {\\n        timestamp = block.timestamp;\\n    }\\n\\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\\n        gaslimit = block.gaslimit;\\n    }\\n\\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\\n        coinbase = block.coinbase;\\n    }\\n}\\n\",\"keccak256\":\"0xf43df6532b0bf2f4a68a648711076dd6f31493c3cb9d7b3f0574933d20dfb64f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a80806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80634d2301cc1161005b5780634d2301cc146100ef57806386d516e81461011f578063a8b0574e1461013d578063ee82ac5e1461015b5761007d565b80630f28c97d14610082578063252dba42146100a057806327e86d6e146100d1575b600080fd5b61008a61018b565b6040516100979190610350565b60405180910390f35b6100ba60048036038101906100b5919061067f565b610193565b6040516100c8929190610809565b60405180910390f35b6100d96102e6565b6040516100e69190610852565b60405180910390f35b6101096004803603810190610104919061086d565b6102fb565b6040516101169190610350565b60405180910390f35b61012761031c565b6040516101349190610350565b60405180910390f35b610145610324565b60405161015291906108a9565b60405180910390f35b610175600480360381019061017091906108f0565b61032c565b6040516101829190610852565b60405180910390f35b600042905090565b60006060439150825167ffffffffffffffff8111156101b5576101b4610395565b5b6040519080825280602002602001820160405280156101e857816020015b60608152602001906001900390816101d35790505b50905060005b83518110156102e05760008085838151811061020d5761020c61091d565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168684815181106102425761024161091d565b5b60200260200101516020015160405161025b9190610988565b6000604051808303816000865af19150503d8060008114610298576040519150601f19603f3d011682016040523d82523d6000602084013e61029d565b606091505b5091509150816102ac57600080fd5b808484815181106102c0576102bf61091d565b5b6020026020010181905250505080806102d8906109ce565b9150506101ee565b50915091565b60006001436102f59190610a16565b40905090565b60008173ffffffffffffffffffffffffffffffffffffffff16319050919050565b600045905090565b600041905090565b600081409050919050565b6000819050919050565b61034a81610337565b82525050565b60006020820190506103656000830184610341565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103cd82610384565b810181811067ffffffffffffffff821117156103ec576103eb610395565b5b80604052505050565b60006103ff61036b565b905061040b82826103c4565b919050565b600067ffffffffffffffff82111561042b5761042a610395565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104768261044b565b9050919050565b6104868161046b565b811461049157600080fd5b50565b6000813590506104a38161047d565b92915050565b600080fd5b600067ffffffffffffffff8211156104c9576104c8610395565b5b6104d282610384565b9050602081019050919050565b82818337600083830152505050565b60006105016104fc846104ae565b6103f5565b90508281526020810184848401111561051d5761051c6104a9565b5b6105288482856104df565b509392505050565b600082601f8301126105455761054461037f565b5b81356105558482602086016104ee565b91505092915050565b60006040828403121561057457610573610441565b5b61057e60406103f5565b9050600061058e84828501610494565b600083015250602082013567ffffffffffffffff8111156105b2576105b1610446565b5b6105be84828501610530565b60208301525092915050565b60006105dd6105d884610410565b6103f5565b90508083825260208201905060208402830185811115610600576105ff61043c565b5b835b8181101561064757803567ffffffffffffffff8111156106255761062461037f565b5b808601610632898261055e565b85526020850194505050602081019050610602565b5050509392505050565b600082601f8301126106665761066561037f565b5b81356106768482602086016105ca565b91505092915050565b60006020828403121561069557610694610375565b5b600082013567ffffffffffffffff8111156106b3576106b261037a565b5b6106bf84828501610651565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561072e578082015181840152602081019050610713565b60008484015250505050565b6000610745826106f4565b61074f81856106ff565b935061075f818560208601610710565b61076881610384565b840191505092915050565b600061077f838361073a565b905092915050565b6000602082019050919050565b600061079f826106c8565b6107a981856106d3565b9350836020820285016107bb856106e4565b8060005b858110156107f757848403895281516107d88582610773565b94506107e383610787565b925060208a019950506001810190506107bf565b50829750879550505050505092915050565b600060408201905061081e6000830185610341565b81810360208301526108308184610794565b90509392505050565b6000819050919050565b61084c81610839565b82525050565b60006020820190506108676000830184610843565b92915050565b60006020828403121561088357610882610375565b5b600061089184828501610494565b91505092915050565b6108a38161046b565b82525050565b60006020820190506108be600083018461089a565b92915050565b6108cd81610337565b81146108d857600080fd5b50565b6000813590506108ea816108c4565b92915050565b60006020828403121561090657610905610375565b5b6000610914848285016108db565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b6000610962826106f4565b61096c818561094c565b935061097c818560208601610710565b80840191505092915050565b60006109948284610957565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109d982610337565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a0b57610a0a61099f565b5b600182019050919050565b6000610a2182610337565b9150610a2c83610337565b9250828203905081811115610a4457610a4361099f565b5b9291505056fea264697066735822122010ef3576c10029bda2b2dc21db707f9d5344711812f21069ec060c75bcc9ef2164736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80634d2301cc1161005b5780634d2301cc146100ef57806386d516e81461011f578063a8b0574e1461013d578063ee82ac5e1461015b5761007d565b80630f28c97d14610082578063252dba42146100a057806327e86d6e146100d1575b600080fd5b61008a61018b565b6040516100979190610350565b60405180910390f35b6100ba60048036038101906100b5919061067f565b610193565b6040516100c8929190610809565b60405180910390f35b6100d96102e6565b6040516100e69190610852565b60405180910390f35b6101096004803603810190610104919061086d565b6102fb565b6040516101169190610350565b60405180910390f35b61012761031c565b6040516101349190610350565b60405180910390f35b610145610324565b60405161015291906108a9565b60405180910390f35b610175600480360381019061017091906108f0565b61032c565b6040516101829190610852565b60405180910390f35b600042905090565b60006060439150825167ffffffffffffffff8111156101b5576101b4610395565b5b6040519080825280602002602001820160405280156101e857816020015b60608152602001906001900390816101d35790505b50905060005b83518110156102e05760008085838151811061020d5761020c61091d565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168684815181106102425761024161091d565b5b60200260200101516020015160405161025b9190610988565b6000604051808303816000865af19150503d8060008114610298576040519150601f19603f3d011682016040523d82523d6000602084013e61029d565b606091505b5091509150816102ac57600080fd5b808484815181106102c0576102bf61091d565b5b6020026020010181905250505080806102d8906109ce565b9150506101ee565b50915091565b60006001436102f59190610a16565b40905090565b60008173ffffffffffffffffffffffffffffffffffffffff16319050919050565b600045905090565b600041905090565b600081409050919050565b6000819050919050565b61034a81610337565b82525050565b60006020820190506103656000830184610341565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103cd82610384565b810181811067ffffffffffffffff821117156103ec576103eb610395565b5b80604052505050565b60006103ff61036b565b905061040b82826103c4565b919050565b600067ffffffffffffffff82111561042b5761042a610395565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104768261044b565b9050919050565b6104868161046b565b811461049157600080fd5b50565b6000813590506104a38161047d565b92915050565b600080fd5b600067ffffffffffffffff8211156104c9576104c8610395565b5b6104d282610384565b9050602081019050919050565b82818337600083830152505050565b60006105016104fc846104ae565b6103f5565b90508281526020810184848401111561051d5761051c6104a9565b5b6105288482856104df565b509392505050565b600082601f8301126105455761054461037f565b5b81356105558482602086016104ee565b91505092915050565b60006040828403121561057457610573610441565b5b61057e60406103f5565b9050600061058e84828501610494565b600083015250602082013567ffffffffffffffff8111156105b2576105b1610446565b5b6105be84828501610530565b60208301525092915050565b60006105dd6105d884610410565b6103f5565b90508083825260208201905060208402830185811115610600576105ff61043c565b5b835b8181101561064757803567ffffffffffffffff8111156106255761062461037f565b5b808601610632898261055e565b85526020850194505050602081019050610602565b5050509392505050565b600082601f8301126106665761066561037f565b5b81356106768482602086016105ca565b91505092915050565b60006020828403121561069557610694610375565b5b600082013567ffffffffffffffff8111156106b3576106b261037a565b5b6106bf84828501610651565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561072e578082015181840152602081019050610713565b60008484015250505050565b6000610745826106f4565b61074f81856106ff565b935061075f818560208601610710565b61076881610384565b840191505092915050565b600061077f838361073a565b905092915050565b6000602082019050919050565b600061079f826106c8565b6107a981856106d3565b9350836020820285016107bb856106e4565b8060005b858110156107f757848403895281516107d88582610773565b94506107e383610787565b925060208a019950506001810190506107bf565b50829750879550505050505092915050565b600060408201905061081e6000830185610341565b81810360208301526108308184610794565b90509392505050565b6000819050919050565b61084c81610839565b82525050565b60006020820190506108676000830184610843565b92915050565b60006020828403121561088357610882610375565b5b600061089184828501610494565b91505092915050565b6108a38161046b565b82525050565b60006020820190506108be600083018461089a565b92915050565b6108cd81610337565b81146108d857600080fd5b50565b6000813590506108ea816108c4565b92915050565b60006020828403121561090657610905610375565b5b6000610914848285016108db565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b6000610962826106f4565b61096c818561094c565b935061097c818560208601610710565b80840191505092915050565b60006109948284610957565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109d982610337565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a0b57610a0a61099f565b5b600182019050919050565b6000610a2182610337565b9150610a2c83610337565b9250828203905081811115610a4457610a4361099f565b5b9291505056fea264697066735822122010ef3576c10029bda2b2dc21db707f9d5344711812f21069ec060c75bcc9ef2164736f6c63430008120033",
  "devdoc": {
    "author": "Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>",
    "kind": "dev",
    "methods": {},
    "title": "Multicall - Aggregate results from multiple read-only function calls",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}